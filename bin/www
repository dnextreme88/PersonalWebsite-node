// Module dependencies
const http = require('http');
const cluster = require('cluster');
const os = require('os');
const config = require('../server/config')[process.env.NODE_ENV || 'development'];
const app = require('../server')(config);

const log = config.log();
const numCPUs = os.cpus().length;

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    const port = parseInt(val, 10);

    // named pipe
    if (Number.isNaN(port)) return val;

    // port number
    if (port >= 0) return port;

    return false;
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Create HTTP server
const server = http.createServer(app);

// Fork worker processes and set each to listen on the assigned port
if (cluster.isMaster) {
    log.info(`Master ${process.pid} is running`);
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }
    cluster.on('exit', (worker) => {
        log.fatal(`Worker ${worker.process.pid} just died`);
        cluster.fork();
    });
} else {
    server.listen(port);
}

server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    log.info(`Listening on ${bind}`);
});

// Handle server errors
server.on('error', (error) => {
    if (error.syscall !== 'listen') throw error;

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.fatal(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.fatal(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            log.info(error);
        // throw error;
    }
});
